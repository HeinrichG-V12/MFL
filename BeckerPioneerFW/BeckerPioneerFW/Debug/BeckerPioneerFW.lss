
BeckerPioneerFW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  0000027c  00000310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000027c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000016c  0080020c  0080020c  0000031c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000034c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001474  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ecb  00000000  00000000  00001998  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ae5  00000000  00000000  00002863  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000364  00000000  00000000  00003348  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000077e  00000000  00000000  000036ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000553  00000000  00000000  00003e2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  0000437d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	65 c0       	rjmp	.+202    	; 0xcc <__ctors_end>
   2:	00 00       	nop
   4:	82 c0       	rjmp	.+260    	; 0x10a <__bad_interrupt>
   6:	00 00       	nop
   8:	80 c0       	rjmp	.+256    	; 0x10a <__bad_interrupt>
   a:	00 00       	nop
   c:	7e c0       	rjmp	.+252    	; 0x10a <__bad_interrupt>
   e:	00 00       	nop
  10:	7c c0       	rjmp	.+248    	; 0x10a <__bad_interrupt>
  12:	00 00       	nop
  14:	7a c0       	rjmp	.+244    	; 0x10a <__bad_interrupt>
  16:	00 00       	nop
  18:	78 c0       	rjmp	.+240    	; 0x10a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	76 c0       	rjmp	.+236    	; 0x10a <__bad_interrupt>
  1e:	00 00       	nop
  20:	74 c0       	rjmp	.+232    	; 0x10a <__bad_interrupt>
  22:	00 00       	nop
  24:	72 c0       	rjmp	.+228    	; 0x10a <__bad_interrupt>
  26:	00 00       	nop
  28:	70 c0       	rjmp	.+224    	; 0x10a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6e c0       	rjmp	.+220    	; 0x10a <__bad_interrupt>
  2e:	00 00       	nop
  30:	6c c0       	rjmp	.+216    	; 0x10a <__bad_interrupt>
  32:	00 00       	nop
  34:	6a c0       	rjmp	.+212    	; 0x10a <__bad_interrupt>
  36:	00 00       	nop
  38:	68 c0       	rjmp	.+208    	; 0x10a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	66 c0       	rjmp	.+204    	; 0x10a <__bad_interrupt>
  3e:	00 00       	nop
  40:	64 c0       	rjmp	.+200    	; 0x10a <__bad_interrupt>
  42:	00 00       	nop
  44:	62 c0       	rjmp	.+196    	; 0x10a <__bad_interrupt>
  46:	00 00       	nop
  48:	60 c0       	rjmp	.+192    	; 0x10a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5e c0       	rjmp	.+188    	; 0x10a <__bad_interrupt>
  4e:	00 00       	nop
  50:	5c c0       	rjmp	.+184    	; 0x10a <__bad_interrupt>
  52:	00 00       	nop
  54:	5a c0       	rjmp	.+180    	; 0x10a <__bad_interrupt>
  56:	00 00       	nop
  58:	58 c0       	rjmp	.+176    	; 0x10a <__bad_interrupt>
  5a:	00 00       	nop
  5c:	56 c0       	rjmp	.+172    	; 0x10a <__bad_interrupt>
  5e:	00 00       	nop
  60:	54 c0       	rjmp	.+168    	; 0x10a <__bad_interrupt>
  62:	00 00       	nop
  64:	70 c0       	rjmp	.+224    	; 0x146 <__vector_25>
  66:	00 00       	nop
  68:	50 c0       	rjmp	.+160    	; 0x10a <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4e c0       	rjmp	.+156    	; 0x10a <__bad_interrupt>
  6e:	00 00       	nop
  70:	4c c0       	rjmp	.+152    	; 0x10a <__bad_interrupt>
  72:	00 00       	nop
  74:	4b c0       	rjmp	.+150    	; 0x10c <__vector_29>
  76:	00 00       	nop
  78:	48 c0       	rjmp	.+144    	; 0x10a <__bad_interrupt>
  7a:	00 00       	nop
  7c:	46 c0       	rjmp	.+140    	; 0x10a <__bad_interrupt>
  7e:	00 00       	nop
  80:	44 c0       	rjmp	.+136    	; 0x10a <__bad_interrupt>
  82:	00 00       	nop
  84:	42 c0       	rjmp	.+132    	; 0x10a <__bad_interrupt>
  86:	00 00       	nop
  88:	40 c0       	rjmp	.+128    	; 0x10a <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3e c0       	rjmp	.+124    	; 0x10a <__bad_interrupt>
  8e:	00 00       	nop
  90:	3c c0       	rjmp	.+120    	; 0x10a <__bad_interrupt>
  92:	00 00       	nop
  94:	3a c0       	rjmp	.+116    	; 0x10a <__bad_interrupt>
  96:	00 00       	nop
  98:	38 c0       	rjmp	.+112    	; 0x10a <__bad_interrupt>
  9a:	00 00       	nop
  9c:	36 c0       	rjmp	.+108    	; 0x10a <__bad_interrupt>
  9e:	00 00       	nop
  a0:	34 c0       	rjmp	.+104    	; 0x10a <__bad_interrupt>
  a2:	00 00       	nop
  a4:	32 c0       	rjmp	.+100    	; 0x10a <__bad_interrupt>
  a6:	00 00       	nop
  a8:	30 c0       	rjmp	.+96     	; 0x10a <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2e c0       	rjmp	.+92     	; 0x10a <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2c c0       	rjmp	.+88     	; 0x10a <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2a c0       	rjmp	.+84     	; 0x10a <__bad_interrupt>
  b6:	00 00       	nop
  b8:	28 c0       	rjmp	.+80     	; 0x10a <__bad_interrupt>
  ba:	00 00       	nop
  bc:	26 c0       	rjmp	.+76     	; 0x10a <__bad_interrupt>
  be:	00 00       	nop
  c0:	24 c0       	rjmp	.+72     	; 0x10a <__bad_interrupt>
  c2:	00 00       	nop
  c4:	22 c0       	rjmp	.+68     	; 0x10a <__bad_interrupt>
  c6:	00 00       	nop
  c8:	20 c0       	rjmp	.+64     	; 0x10a <__bad_interrupt>
	...

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d1 e2       	ldi	r29, 0x21	; 33
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61
  d8:	00 e0       	ldi	r16, 0x00	; 0
  da:	0c bf       	out	0x3c, r16	; 60

000000dc <__do_copy_data>:
  dc:	12 e0       	ldi	r17, 0x02	; 2
  de:	a0 e0       	ldi	r26, 0x00	; 0
  e0:	b2 e0       	ldi	r27, 0x02	; 2
  e2:	ec e7       	ldi	r30, 0x7C	; 124
  e4:	f2 e0       	ldi	r31, 0x02	; 2
  e6:	00 e0       	ldi	r16, 0x00	; 0
  e8:	0b bf       	out	0x3b, r16	; 59
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <__do_copy_data+0x14>
  ec:	07 90       	elpm	r0, Z+
  ee:	0d 92       	st	X+, r0
  f0:	ac 30       	cpi	r26, 0x0C	; 12
  f2:	b1 07       	cpc	r27, r17
  f4:	d9 f7       	brne	.-10     	; 0xec <__do_copy_data+0x10>

000000f6 <__do_clear_bss>:
  f6:	23 e0       	ldi	r18, 0x03	; 3
  f8:	ac e0       	ldi	r26, 0x0C	; 12
  fa:	b2 e0       	ldi	r27, 0x02	; 2
  fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
  fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
 100:	a8 37       	cpi	r26, 0x78	; 120
 102:	b2 07       	cpc	r27, r18
 104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
 106:	53 d0       	rcall	.+166    	; 0x1ae <main>
 108:	b7 c0       	rjmp	.+366    	; 0x278 <_exit>

0000010a <__bad_interrupt>:
 10a:	7a cf       	rjmp	.-268    	; 0x0 <__vectors>

0000010c <__vector_29>:
	ADCSRA = (1 << ADEN)|(1 << ADIE)|(1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0); // ad enabled, interrupt enabled, prescaler = 128	
	// adcsrb is not used because of free runnging mode
}

ISR(ADC_vect)
{
 10c:	1f 92       	push	r1
 10e:	0f 92       	push	r0
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	0f 92       	push	r0
 114:	11 24       	eor	r1, r1
 116:	8f 93       	push	r24
	// If the result is left adjusted and no more than 8-bit precision is required, it is sufficient to read ADCH
	adc_value = ADCH;
 118:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
 11c:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
 120:	8f 91       	pop	r24
 122:	0f 90       	pop	r0
 124:	0f be       	out	0x3f, r0	; 63
 126:	0f 90       	pop	r0
 128:	1f 90       	pop	r1
 12a:	18 95       	reti

0000012c <rx_buffer_write_entry>:
	rx_consumer_ptr = 0;
}

void rx_buffer_write_entry (uint8_t pos, uint8_t data)
{
	rx_buffer[rx_producer_ptr][pos] = data;
 12c:	20 91 0e 02 	lds	r18, 0x020E	; 0x80020e <rx_producer_ptr>
 130:	94 e2       	ldi	r25, 0x24	; 36
 132:	29 9f       	mul	r18, r25
 134:	90 01       	movw	r18, r0
 136:	11 24       	eor	r1, r1
 138:	21 5f       	subi	r18, 0xF1	; 241
 13a:	3d 4f       	sbci	r19, 0xFD	; 253
 13c:	f9 01       	movw	r30, r18
 13e:	e8 0f       	add	r30, r24
 140:	f1 1d       	adc	r31, r1
 142:	60 83       	st	Z, r22
 144:	08 95       	ret

00000146 <__vector_25>:
	uart0_sendChar(crc);
	uart0_rtx();
}

ISR(USART0_RX_vect)
{
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	0b b6       	in	r0, 0x3b	; 59
 152:	0f 92       	push	r0
 154:	2f 93       	push	r18
 156:	3f 93       	push	r19
 158:	4f 93       	push	r20
 15a:	5f 93       	push	r21
 15c:	6f 93       	push	r22
 15e:	7f 93       	push	r23
 160:	8f 93       	push	r24
 162:	9f 93       	push	r25
 164:	af 93       	push	r26
 166:	bf 93       	push	r27
 168:	cf 93       	push	r28
 16a:	ef 93       	push	r30
 16c:	ff 93       	push	r31
	uint8_t byte, timer_value;
	static uint8_t rx_position;
		
	byte = UDR0;
 16e:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	timer_value = timer0_getValue();
 172:	30 d0       	rcall	.+96     	; 0x1d4 <timer0_getValue>
	
	if (timer_value > IBUS_PRIO1_DELAY)
 174:	8e 31       	cpi	r24, 0x1E	; 30
 176:	30 f0       	brcs	.+12     	; 0x184 <__vector_25+0x3e>
	{
		// start of new ibus message
		rx_buffer_write_entry(0, byte);
 178:	6c 2f       	mov	r22, r28
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	d7 df       	rcall	.-82     	; 0x12c <rx_buffer_write_entry>
		irqStatus = waitingForLen;
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <irqStatus>
	}
	
	
	timer0_reset();
 184:	2d d0       	rcall	.+90     	; 0x1e0 <timer0_reset>
 186:	ff 91       	pop	r31
 188:	ef 91       	pop	r30
 18a:	cf 91       	pop	r28
 18c:	bf 91       	pop	r27
 18e:	af 91       	pop	r26
 190:	9f 91       	pop	r25
 192:	8f 91       	pop	r24
 194:	7f 91       	pop	r23
 196:	6f 91       	pop	r22
 198:	5f 91       	pop	r21
 19a:	4f 91       	pop	r20
 19c:	3f 91       	pop	r19
 19e:	2f 91       	pop	r18
 1a0:	0f 90       	pop	r0
 1a2:	0b be       	out	0x3b, r0	; 59
 1a4:	0f 90       	pop	r0
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	0f 90       	pop	r0
 1aa:	1f 90       	pop	r1
 1ac:	18 95       	reti

000001ae <main>:

extern uint16_t adc_value;

int main(void)
{
	uart0_init();
 1ae:	30 d0       	rcall	.+96     	; 0x210 <uart0_init>
	uart1_init();
 1b0:	3e d0       	rcall	.+124    	; 0x22e <uart1_init>
	becker_init();
 1b2:	01 d0       	rcall	.+2      	; 0x1b6 <becker_init>
 1b4:	ff cf       	rjmp	.-2      	; 0x1b4 <main+0x6>

000001b6 <becker_init>:
 1b6:	cf 93       	push	r28
uint8_t INIT[] = {STX, 0x30, 0x42, 0x46, 0x30, 0x35, 0x41, 0x41, 0x35, 0x30, 0x34, CR};
	
uint8_t RELEASE[] = {STX, 0x30, 0x42, 0x46, 0x30, 0x35, 0x35, 0x30, 0x30, 0x41, 0x45, CR};

void becker_init(void)
{
 1b8:	df 93       	push	r29
 1ba:	c9 e0       	ldi	r28, 0x09	; 9
 1bc:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 0; i <= 8; i++)
	{
		uart1_sendCommand(INIT);
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	92 e0       	ldi	r25, 0x02	; 2
 1c2:	4c d0       	rcall	.+152    	; 0x25c <uart1_sendCommand>
		// warte 500ms nach dem senden!
		timer_delay_ms(500);
 1c4:	84 ef       	ldi	r24, 0xF4	; 244
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	0f d0       	rcall	.+30     	; 0x1e8 <timer_delay_ms>
 1ca:	21 97       	sbiw	r28, 0x01	; 1
	
uint8_t RELEASE[] = {STX, 0x30, 0x42, 0x46, 0x30, 0x35, 0x35, 0x30, 0x30, 0x41, 0x45, CR};

void becker_init(void)
{
	for (int i = 0; i <= 8; i++)
 1cc:	c1 f7       	brne	.-16     	; 0x1be <becker_init+0x8>
	{
		uart1_sendCommand(INIT);
		// warte 500ms nach dem senden!
		timer_delay_ms(500);
	}
}
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	08 95       	ret

000001d4 <timer0_getValue>:
}

uint8_t timer0_getValue(void)
{
	// overflow occured?
	if (TIFR0 & (1 << TOV0)) {
 1d4:	a8 99       	sbic	0x15, 0	; 21
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <timer0_getValue+0x8>
		return 0xFF;
	}
	
	return TCNT0;	
 1d8:	86 b5       	in	r24, 0x26	; 38
 1da:	08 95       	ret

uint8_t timer0_getValue(void)
{
	// overflow occured?
	if (TIFR0 & (1 << TOV0)) {
		return 0xFF;
 1dc:	8f ef       	ldi	r24, 0xFF	; 255
	}
	
	return TCNT0;	
}
 1de:	08 95       	ret

000001e0 <timer0_reset>:

void timer0_reset(void)
{
	// reset overflow
	TIFR0 = (1<<TOV0);
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	85 bb       	out	0x15, r24	; 21
	// reset value
	TCNT0 = 0;
 1e4:	16 bc       	out	0x26, r1	; 38
 1e6:	08 95       	ret

000001e8 <timer_delay_ms>:
}

void timer_delay_ms (uint16_t delay)
{
 1e8:	9c 01       	movw	r18, r24
	do
	{
		// timer5, prescaler 1, preload 49536, delay 0.
		TCNT5 = 49536;
 1ea:	a4 e2       	ldi	r26, 0x24	; 36
 1ec:	b1 e0       	ldi	r27, 0x01	; 1
 1ee:	40 e8       	ldi	r20, 0x80	; 128
 1f0:	51 ec       	ldi	r21, 0xC1	; 193
		TCCR5B |= (1<<CS50);
 1f2:	e1 e2       	ldi	r30, 0x21	; 33
 1f4:	f1 e0       	ldi	r31, 0x01	; 1
void timer_delay_ms (uint16_t delay)
{
	do
	{
		// timer5, prescaler 1, preload 49536, delay 0.
		TCNT5 = 49536;
 1f6:	11 96       	adiw	r26, 0x01	; 1
 1f8:	5c 93       	st	X, r21
 1fa:	4e 93       	st	-X, r20
		TCCR5B |= (1<<CS50);
 1fc:	90 81       	ld	r25, Z
 1fe:	91 60       	ori	r25, 0x01	; 1
 200:	90 83       	st	Z, r25
		while ((TIFR5 & (1 << TOV5)) == 0);
 202:	d0 9b       	sbis	0x1a, 0	; 26
 204:	fe cf       	rjmp	.-4      	; 0x202 <timer_delay_ms+0x1a>
		TIFR5 |= (1 << TOV5);
 206:	d0 9a       	sbi	0x1a, 0	; 26
		delay--;
 208:	21 50       	subi	r18, 0x01	; 1
 20a:	31 09       	sbc	r19, r1
	} while (delay > 0);
 20c:	a1 f7       	brne	.-24     	; 0x1f6 <timer_delay_ms+0xe>
 20e:	08 95       	ret

00000210 <uart0_init>:
	UCSR0B = (1 << TXEN0);
}

void uart0_rtx (void)
{
	UCSR0B = (1 << RXEN0)|(1 << TXEN0)|(1 << RXCIE0);
 210:	87 e6       	ldi	r24, 0x67	; 103
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 218:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 21c:	88 e9       	ldi	r24, 0x98	; 152
 21e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 222:	86 e2       	ldi	r24, 0x26	; 38
 224:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 228:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 22c:	08 95       	ret

0000022e <uart1_init>:
}

void uart1_init(void)
{
	uint8_t dummy = 0;
	UBRR1 = UBRR0_REG;
 22e:	87 e6       	ldi	r24, 0x67	; 103
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
 236:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
	UCSR1B = (1 << TXEN0);	// receiver and transceiver enabled
 23a:	88 e0       	ldi	r24, 0x08	; 8
 23c:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
	UCSR1C = (1 << UCSZ11)|(1 << UCSZ10);	// 8n1
 240:	86 e0       	ldi	r24, 0x06	; 6
 242:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
	dummy = UDR0;	
 246:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 24a:	08 95       	ret

0000024c <uart1_sendChar>:
}

void uart1_sendChar(uint8_t data)
{
	while (!( UCSR1A & (1<<UDRE1)));
 24c:	e8 ec       	ldi	r30, 0xC8	; 200
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	90 81       	ld	r25, Z
 252:	95 ff       	sbrs	r25, 5
 254:	fd cf       	rjmp	.-6      	; 0x250 <uart1_sendChar+0x4>
	UDR1 = data;
 256:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 25a:	08 95       	ret

0000025c <uart1_sendCommand>:
}

void uart1_sendCommand (uint8_t *data)
{
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
 260:	ec 01       	movw	r28, r24
	int i = 0;
	
	while(data[i] != CR)
 262:	88 81       	ld	r24, Y
 264:	8d 30       	cpi	r24, 0x0D	; 13
 266:	29 f0       	breq	.+10     	; 0x272 <uart1_sendCommand+0x16>
 268:	21 96       	adiw	r28, 0x01	; 1
	{
		uart1_sendChar(data[i]);
 26a:	f0 df       	rcall	.-32     	; 0x24c <uart1_sendChar>

void uart1_sendCommand (uint8_t *data)
{
	int i = 0;
	
	while(data[i] != CR)
 26c:	89 91       	ld	r24, Y+
 26e:	8d 30       	cpi	r24, 0x0D	; 13
 270:	e1 f7       	brne	.-8      	; 0x26a <uart1_sendCommand+0xe>
	{
		uart1_sendChar(data[i]);
		i++;
	}
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	08 95       	ret

00000278 <_exit>:
 278:	f8 94       	cli

0000027a <__stop_program>:
 27a:	ff cf       	rjmp	.-2      	; 0x27a <__stop_program>
